snippet class
class ${1:ClassName}${2: < ${3:BaseClass}}
  $0
end
endsnippet

snippet module
module ${1:ModuleName}
  $0
end
endsnippet

snippet init
def initialize${1:(${2:args})}
end
endsnippet

snippet @=
@${1:name} = ${2:value}
endsnippet

snippet def
def ${1:name}${2:(${3:args})}
  $0
end
endsnippet

snippet defni
def ${1:name}${2:(${3:args})}
  fail(NotImplementedError.new)
end
endsnippet

snippet memo
def ${1:name}
  @$1 ||= ${2:value}
end
endsnippet

snippet pry
binding.pry
endsnippet

snippet l
let(:${1}) { ${2} }
endsnippet

snippet l!
let!(:${1}) { ${2} }
endsnippet

snippet dsc
describe '${1}' do
  ${0}
end
endsnippet

snippet it
it '${1}' do
  ${0}
end
endsnippet

snippet exp
expect(${1:value}).to ${2:expectation}
endsnippet

snippet expn
expect(${1:value}).not_to ${2:expectation}
endsnippet

snippet b
before(${1::each}) do
  $0
end
endsnippet

snippet a
after(${1::each}) do
  $0
end
endsnippet

snippet puts=
puts("${1:expression} = #{$1}")
endsnippet

snippet log
Rails.logger.${1:info}
endsnippet

snippet log=
Rails.logger.${1:info}("${2:expression} = #{$2}")
endsnippet

snippet t
test '${1:description}' do
  ${0}
end
endsnippet

snippet ares
assert_response(:${1:success})
endsnippet

snippet asel
assert_select('${1:selector}')
endsnippet

snippet aeq
assert_equal(${1:expected}, ${2:actual})
endsnippet
