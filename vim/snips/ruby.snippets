snippet c "a class" b
class ${1}
  ${2}
end
endsnippet

snippet m "a module" b
module ${1}
  ${2}
end
endsnippet

snippet d "a def" b
def ${1}${2}
  ${3}
end
endsnippet

snippet memo "a memoization method" b
def ${1:name}
  @$1 = ${2:value}
end
endsnippet

snippet pry "a Pry breakpoint" b
binding.pry
endsnippet

snippet defi "the initialize method" b
def initialize(${1})
`!p
snip >> 1
if t[1].strip():
    for name in t[1].split(','):
        snip.rv += snip.mkline('@{0} = {0}'.format(name.strip()))`
end
endsnippet

snippet let "an RSpect let" b
let(:${1}) { ${2} }
endsnippet

snippet let! "an RSpect let!" b
let!(:${1}) { ${2} }
endsnippet
